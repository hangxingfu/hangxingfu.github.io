<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hxf 日常</title>
  <icon>https://www.gravatar.com/avatar/a31cdef814535e9779636d5934eb4d63</icon>
  <subtitle>Stay hungry, stay foolish.</subtitle>
  <link href="https://hangxingfu.github.io/atom.xml" rel="self"/>
  
  <link href="https://hangxingfu.github.io/"/>
  <updated>2024-03-25T02:58:12.657Z</updated>
  <id>https://hangxingfu.github.io/</id>
  
  <author>
    <name>hangxingfu</name>
    <email>2649283917@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flex设置间隔gap属性</title>
    <link href="https://hangxingfu.github.io/2024/03/25/flex%E8%AE%BE%E7%BD%AE%E9%97%B4%E9%9A%94gap%E5%B1%9E%E6%80%A7/"/>
    <id>https://hangxingfu.github.io/2024/03/25/flex%E8%AE%BE%E7%BD%AE%E9%97%B4%E9%9A%94gap%E5%B1%9E%E6%80%A7/</id>
    <published>2024-03-25T02:45:10.000Z</published>
    <updated>2024-03-25T02:58:12.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flex布局设置间隔属性"><a href="#flex布局设置间隔属性" class="headerlink" title="flex布局设置间隔属性"></a>flex布局设置间隔属性</h3><p>可以用<code>gap</code>来做flex布局时的间隔设置。横向和纵向之间都可以。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"><span class="attribute">gap</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><p>但是，有的浏览器不支持<code>gap</code>属性，需要做兼容。</p><p>用<code>margin</code>属性，将右边和下边的属性设置好。用scss的方法把它封装起来，用的时候就引入就可以了。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> gap(<span class="variable">$size</span>) &#123;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="built_in">calc</span>(<span class="number">0px</span> - <span class="variable">$size</span>);</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="built_in">calc</span>(<span class="number">0px</span> - <span class="variable">$size</span>);</span><br><span class="line">&amp; &gt; * &#123;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="variable">$size</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="variable">$size</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;flex布局设置间隔属性&quot;&gt;&lt;a href=&quot;#flex布局设置间隔属性&quot; class=&quot;headerlink&quot; title=&quot;flex布局设置间隔属性&quot;&gt;&lt;/a&gt;flex布局设置间隔属性&lt;/h3&gt;&lt;p&gt;可以用&lt;code&gt;gap&lt;/code&gt;来做flex布局时的间</summary>
      
    
    
    
    
    <category term="flex" scheme="https://hangxingfu.github.io/tags/flex/"/>
    
    <category term="css" scheme="https://hangxingfu.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Node.js learning</title>
    <link href="https://hangxingfu.github.io/2024/03/21/Node-js-learning/"/>
    <id>https://hangxingfu.github.io/2024/03/21/Node-js-learning/</id>
    <published>2024-03-21T08:10:24.000Z</published>
    <updated>2024-03-22T02:52:00.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cjs-mjs"><a href="#cjs-mjs" class="headerlink" title="cjs mjs"></a>cjs mjs</h3><p>cjs 和 mjs 是两种规范，目前主流使用mjs.</p><p>mjs规范的两种方式：</p><ol><li>package.json文件里配置“type: module”</li><li>js文件后缀名为“mjs”</li></ol><h3 id="node-js中的打印"><a href="#node-js中的打印" class="headerlink" title="node.js中的打印"></a>node.js中的打印</h3><p>打印都在终端，而vue等前端项目的打印在浏览器的控制台，要区分开哪里的打印在哪个端。</p><p>包：<code>javascript-stringify</code> , 在打印时可以几乎没有隐藏的将函数和对象全都打印。</p><h3 id="filename-dirname"><a href="#filename-dirname" class="headerlink" title="__filename  __dirname"></a><code>__filename</code> <code> __dirname</code></h3><p>在mjs中，无法使用cjs中的一些变量。比如 <code>__filename</code>  <code>__dirname</code> 。</p><p>如果要使用这两个变量，可以用 <code>import.meta.url</code> 的方式迂回使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileName = path.<span class="title function_">resolve</span>(__dirname, process.<span class="property">argv</span>[<span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fileName:&#x27;</span>, fileName);</span><br></pre></td></tr></table></figure><h3 id="child-process模块"><a href="#child-process模块" class="headerlink" title="child_process模块"></a>child_process模块</h3><ul><li>开启一个子进程，去做别的事情</li><li><code>const &#123; spawn, spawnSync &#125; = Chileprocess</code><ul><li>spawn是用来执行一个命令行的任务</li><li><code>const &#123; stdout, stderr &#125; = spawnSync(&#39;git&#39;, [&#39;log&#39;, &#39;-1&#39;, &#39;--pretty=&quot;%ci&quot;&#39;, fileName])</code><ul><li>查看git里面某个文件的最近的一次修改的时间。</li><li><code>toString()</code> 方法可以指定编码的格式。</li></ul></li></ul></li><li>类似spawn的<code>exec, execSync</code></li><li>执行文件的 <code>execFile, execFileSync</code></li><li>开启一个子进程并与之通信 <code>fork</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;cjs-mjs&quot;&gt;&lt;a href=&quot;#cjs-mjs&quot; class=&quot;headerlink&quot; title=&quot;cjs mjs&quot;&gt;&lt;/a&gt;cjs mjs&lt;/h3&gt;&lt;p&gt;cjs 和 mjs 是两种规范，目前主流使用mjs.&lt;/p&gt;
&lt;p&gt;mjs规范的两种方式：&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Node.js" scheme="https://hangxingfu.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>CSS文本行</title>
    <link href="https://hangxingfu.github.io/2024/03/21/CSS%E6%96%87%E6%9C%AC%E8%A1%8C/"/>
    <id>https://hangxingfu.github.io/2024/03/21/CSS%E6%96%87%E6%9C%AC%E8%A1%8C/</id>
    <published>2024-03-21T07:38:17.000Z</published>
    <updated>2024-03-21T08:01:22.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单行，隐藏多余，加省略号"><a href="#单行，隐藏多余，加省略号" class="headerlink" title="单行，隐藏多余，加省略号"></a>单行，隐藏多余，加省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 保留一行，超出隐藏，多余省略号 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="多行，但是中文可以"><a href="#多行，但是中文可以" class="headerlink" title="多行，但是中文可以"></a>多行，但是中文可以</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 保留三行，超出隐藏，多余省略号（中文生效，英文不行） */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;单行，隐藏多余，加省略号&quot;&gt;&lt;a href=&quot;#单行，隐藏多余，加省略号&quot; class=&quot;headerlink&quot; title=&quot;单行，隐藏多余，加省略号&quot;&gt;&lt;/a&gt;单行，隐藏多余，加省略号&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;ta</summary>
      
    
    
    
    
    <category term="CSS" scheme="https://hangxingfu.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记</title>
    <link href="https://hangxingfu.github.io/2023/09/14/Vue%E7%AC%94%E8%AE%B0/"/>
    <id>https://hangxingfu.github.io/2023/09/14/Vue%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-14T13:39:00.000Z</published>
    <updated>2023-09-15T03:39:09.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="V3与V2的区别"><a href="#V3与V2的区别" class="headerlink" title="V3与V2的区别"></a>V3与V2的区别</h3><ol><li>根结点可有多个</li><li>响应式API由defineProperty变为composition</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;V3与V2的区别&quot;&gt;&lt;a href=&quot;#V3与V2的区别&quot; class=&quot;headerlink&quot; title=&quot;V3与V2的区别&quot;&gt;&lt;/a&gt;V3与V2的区别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;根结点可有多个&lt;/li&gt;
&lt;li&gt;响应式API由defineProperty变为</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://hangxingfu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript笔记</title>
    <link href="https://hangxingfu.github.io/2023/09/12/TypeScript%E7%AC%94%E8%AE%B0/"/>
    <id>https://hangxingfu.github.io/2023/09/12/TypeScript%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-12T10:25:00.000Z</published>
    <updated>2023-09-13T10:31:28.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TS的类型"><a href="#TS的类型" class="headerlink" title="TS的类型"></a>TS的类型</h3><p><strong>类型声明</strong><br><strong>类型推断</strong>，类型声明并不是必需的，如果没有，TypeScript 会自己推断类型。TypeScript 也可以推断函数的返回值。</p><p><strong>TS的编译</strong>，官方只有编译器，没有运行环境。编译时检查类型，编译为JS后就不会检查类型了。编译器 tsc ，编译的配置项可以写成配置文件 tsconfig.json。</p><p><strong>值与类型</strong>，“类型”是针对“值”的，可以视为是后者的一个元属性。每一个值在 TypeScript 里面都是有类型的。比如，<code>3</code>是一个值，它的类型是<code>number</code>。TypeScript 项目里面，其实存在两种代码，一种是底层的“值代码”，另一种是上层的“类型代码”。前者使用 JavaScript 语法，后者使用 TypeScript 的类型语法。</p><ol><li><p>any类型</p><ul><li>类型推断无法推断出具体类型则为any类型；所以对于那些类型不明显的变量，一定要显式声明类型，防止被推断为<code>any</code>。</li><li>TypeScript 提供了一个编译选项<code>noImplicitAny</code>，打开该选项，只要推断出<code>any</code>类型就会报错。但是在使用let和var声明的变量不赋值的话，编译是不会报错的，所以在使用这两个声明关键词时最好自行声明好类型。</li><li>any类型的变量在被赋值给别的变量时，因为关闭了类型检查，所以会污染别的变量，导致错误。</li></ul></li><li><p>unknow类型</p><ul><li><p>与any类型相似，被称为严格版的any。</p></li><li><p><code>unknown</code>类型跟<code>any</code>类型的不同之处在于，它不能直接使用。主要有以下几个限制。</p><ul><li><p><code>unknown</code>类型的变量，不能直接赋值给其他类型的变量（除了<code>any</code>类型和<code>unknown</code>类型）。如果强行赋值给其他类型变量会报错，避免了污染问题。</p></li><li><p>不能直接调用<code>unknown</code>类型变量的方法和属性。</p></li><li><p><code>unknown</code>类型变量能够进行的运算是有限的，只能进行比较运算（运算符<code>==</code>、<code>===</code>、<code>!=</code>、<code>!==</code>、<code>||</code>、<code>&amp;&amp;</code>、<code>?</code>）、取反运算（运算符<code>!</code>）、<code>typeof</code>运算符和<code>instanceof</code>运算符这几种，其他运算都会报错。</p></li><li><p>unknow使用方式</p><ul><li><p>经过“类型缩小”，<code>unknown</code>类型变量才可以使用。所谓“类型缩小”，就是缩小<code>unknown</code>变量的类型范围，确保不会出错。</p></li><li><pre><code class="ts">let a:unknown = 1;if (typeof a === &#39;number&#39;) &#123;  let r = a + 10; // 正确&#125;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```<span class="language-javascript">ts</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="attr">s</span>:unknown = <span class="string">&#x27;hello&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (<span class="keyword">typeof</span> s === <span class="string">&#x27;string&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  s.<span class="property">length</span>; <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>这样设计的目的是，只有明确<code>unknown</code>变量的实际类型，才允许使用它，防止像<code>any</code>那样可以随意乱用，“污染”其他变量。类型缩小以后再使用，就不会报错。一般来说，凡是需要设为<code>any</code>类型的地方，通常都应该优先考虑设为<code>unknown</code>类型。</p></li><li><p>在集合论上，<code>unknown</code>也可以视为所有其他类型（除了<code>any</code>）的全集，所以它和<code>any</code>一样，也属于 TypeScript 的顶层类型。</p></li></ul></li></ul></li></ul></li><li><p>never类型</p><ul><li><p>“空类型”，即该类型为空，不包含任何值。</p></li><li><p><code>never</code>类型的一个重要特点是，可以赋值给任意其他类型。</p><ul><li><pre><code class="ts">function f():never &#123;  throw new Error(&#39;Error&#39;);&#125;let v1:number = f(); // 不报错let v2:string = f(); // 不报错let v3:boolean = f(); // 不报错</code></pre></li></ul></li><li><p>为什么<code>never</code>类型可以赋值给任意其他类型呢？这也跟集合论有关，空集是任何集合的子集。TypeScript 就相应规定，任何类型都包含了<code>never</code>类型。因此，<code>never</code>类型是任何其他类型所共有的，TypeScript 把这种情况称为“底层类型”（bottom type）。</p></li><li><p>TypeScript 有两个“顶层类型”（<code>any</code>和<code>unknown</code>），但是“底层类型”只有<code>never</code>唯一一个。</p></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;TS的类型&quot;&gt;&lt;a href=&quot;#TS的类型&quot; class=&quot;headerlink&quot; title=&quot;TS的类型&quot;&gt;&lt;/a&gt;TS的类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;类型声明&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;类型推断&lt;/strong&gt;，类型声明并不是必需的，</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://hangxingfu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>文章摘抄</title>
    <link href="https://hangxingfu.github.io/2021/10/10/BOOKS-NOTE/"/>
    <id>https://hangxingfu.github.io/2021/10/10/BOOKS-NOTE/</id>
    <published>2021-10-10T07:40:16.000Z</published>
    <updated>2023-03-18T12:07:04.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《爱与信任》"><a href="#《爱与信任》" class="headerlink" title="《爱与信任》"></a>《爱与信任》</h3><p align="right">三毛 <small>著</small></p><p>&emsp;&emsp;母亲看我吃，她便快乐无比。我便笑称，吃到成了千台斤的大肥猪而死时，她必定在咽气之前，还要灌一碗参汤下去，好使她的爱，因为那碗汤，使我黄泉之路走得更有体力。</p><p align="right">< 2022-05-19 ></p><hr><h3 id="《北大授课：中华文化四十七讲》"><a href="#《北大授课：中华文化四十七讲》" class="headerlink" title="《北大授课：中华文化四十七讲》"></a>《北大授课：中华文化四十七讲》</h3><p align="right">余秋雨 <small>著</small></p><p>&emsp;&emsp;没有阴影的高楼，一定还未曾建造；没有藤缠的大树，一定还气象未到。<br />&emsp;&emsp;美，不是外在点缀，而是人性、人情的精选形式。在社会上，政治和经济是在争取生命的强大和自尊，而美，则在争取生命的品质和等级。</p><p align="right">< 2022-05-07 ></p><hr><h3 id="《情人》"><a href="#《情人》" class="headerlink" title="《情人》"></a>《情人》</h3><p align="right">玛格丽特·杜拉斯 <small>著</small></p><p>&emsp;&emsp;我认识你，永远记得你。那时你很年轻，人人都说你美。现在我特地来告诉你，对我来说，我觉得现在你比年轻时候更美。那时你是年轻女人，与那时的容貌相比，我更爱你现在备受摧残的面容。</p><p align="right">< 2022-02-27 ></p><hr><h3 id="《双子星》"><a href="#《双子星》" class="headerlink" title="《双子星》"></a>《双子星》</h3><p align="right">伊坂幸太郎 <small>著</small></p><p>&emsp;&emsp;大婶缓缓转过头来，深深叹了口气：“优我，你脑子好使，肯定也知道借钱本身根本不是问题。我想说的是，谈钱需要相应的觉悟，它有可能破坏我跟你们之间的关系。你们明白这一点，却还想找我借钱，这让我心里不是滋味呀。借钱倒是没什么。”<br />&emsp;&emsp;我和风我深深地低下了头。<br />&emsp;&emsp;再多得辩解和歉意都没有意义了。<br />&emsp;&emsp;或许我们和大婶的关系会因此生隙，但总有一天裂痕会修复，我们会弥补她的。<br />&emsp;&emsp;我认为这样，风我肯定也一样。<br />&emsp;&emsp;最终借了两百万日元。<br />&emsp;&emsp;摞起来也没有多厚，甚至有些叫人失望。<br /></p><p align="right">< 2021-10-10 ></p><hr><h3 id="《三日间的幸福》"><a href="#《三日间的幸福》" class="headerlink" title="《三日间的幸福》"></a>《三日间的幸福》</h3><p align="right">三秋缒 <small>著</small></p><p>&emsp;&emsp;“虽然我现在才二十岁，但有很多事情都已忘光了。不管曾经多么幸福或痛苦，只要没遇上回想的契机，不消多久，我便全部忘记了。只要没注意这件事，恐怕连忘记本身都‘忘记了’。如果每个人都可以精确无误地记得最美好的事情，恐怕会愁眉苦脸地空虚度日了。就算每个人都可以精确无误地记住最糟的回忆，最终也只能愁眉苦脸地空虚度日。有些事若不先行记下，可能会将自己逼入绝境，所以每个人都只是在拼命记住事情而已。<p align="right">< 2018-02-05 ></p><hr><h3 id="《一生所寻不过爱与自由》"><a href="#《一生所寻不过爱与自由》" class="headerlink" title="《一生所寻不过爱与自由》"></a>《一生所寻不过爱与自由》</h3><p align="right">李银河 <small>著</small></p><p>&emsp;&emsp;活着只是一种人的状态，就像一条鱼，一棵树，一只甲壳虫。我们来到世上，我们消耗掉一些物质，改变周边的一些物质，然后离开人世。说起改变周边物质，想起刘亮程用第一人称写的农村生活：“我”扛了把铁锨，在地里挖了一个坑，然后仰天长叹：这就是我能改变的事物。</p><p align="right">< 2018-02-05 ></p><blockquote><p>📚 海德格尔 – 德国哲学家；刘亮程 – 《一个人的村庄》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;《爱与信任》&quot;&gt;&lt;a href=&quot;#《爱与信任》&quot; class=&quot;headerlink&quot; title=&quot;《爱与信任》&quot;&gt;&lt;/a&gt;《爱与信任》&lt;/h3&gt;&lt;p align=&quot;right&quot;&gt;三毛 &lt;small&gt;著&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;母</summary>
      
    
    
    
    <category term="文字" scheme="https://hangxingfu.github.io/categories/%E6%96%87%E5%AD%97/"/>
    
    
    <category term="摘抄" scheme="https://hangxingfu.github.io/tags/%E6%91%98%E6%8A%84/"/>
    
  </entry>
  
  <entry>
    <title>go报错原因</title>
    <link href="https://hangxingfu.github.io/2021/08/13/go%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/"/>
    <id>https://hangxingfu.github.io/2021/08/13/go%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/</id>
    <published>2021-08-13T08:26:51.000Z</published>
    <updated>2023-03-18T09:17:38.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go-报错原因"><a href="#go-报错原因" class="headerlink" title="go 报错原因"></a>go 报错原因</h2><ul><li><p><code>no result values expected</code><br>函数没有写返回值，却进行了 return</p></li><li><p><code>undeclared name: xx</code><br>为定义的变量名，注意定义时的 : 有没有写</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;go-报错原因&quot;&gt;&lt;a href=&quot;#go-报错原因&quot; class=&quot;headerlink&quot; title=&quot;go 报错原因&quot;&gt;&lt;/a&gt;go 报错原因&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;no result values expected&lt;/code&gt;&lt;br</summary>
      
    
    
    
    
    <category term="go" scheme="https://hangxingfu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go切片需要注意的地方</title>
    <link href="https://hangxingfu.github.io/2021/08/04/go%E5%88%87%E7%89%87%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://hangxingfu.github.io/2021/08/04/go%E5%88%87%E7%89%87%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</id>
    <published>2021-08-04T02:55:22.000Z</published>
    <updated>2023-03-18T09:17:38.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="有关于切片-slice"><a href="#有关于切片-slice" class="headerlink" title="有关于切片 slice"></a>有关于切片 slice</h3><ul><li><p>在 go 语言中，数组其实是不经常使用的，因为它在函数传参时默认使用的是值传递（复制本身的值再传递给函数内，若是这个数组非常大，将会十分消耗内存资源，且在函数内对数组做出的改变不会影响到数组数据本身）；经常使用的是切片，就是 slice。</p></li><li><p>其 slice 在作为函数参数时是引用传递，在函数内对其做的操作会影响到数据本身。</p></li><li><p>slice 的取值操作遵循半封闭原则，比如取值<code>[2:6]</code>，取 2 的数据，第 5 个取完就停止了，不会取 6 的数据。</p></li></ul><p><strong><code>slice本身是没有数据的，底层是对数组的一个view（视图）</code></strong></p><ul><li>数组想要传递到参数是切片的函数，可以这么写</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    updateArray(arr[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateArray</span><span class="params">(a []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// to do ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当你在函数内修改数组的数据时，数组本身的数据也会跟着改变</p><h3 id="slice-的扩展"><a href="#slice-的扩展" class="headerlink" title="slice 的扩展"></a>slice 的扩展</h3><p>先看例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">s1 := arr[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>这时，请问 s1,s2 的值分别是多少?<br>在 s1 中只有 4 个数值，根本不满足 5 的下标取值，按理说 s2 的取值应该会报错，但是确实能够取到，打印出来如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1= [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">s2= [<span class="number">5</span> <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>如果单独取 5<code>s2[5]</code>会报错</p><p>因为 slice 的数据结构是由 ptr(指针)，len（长度），cap（容量）组成的，当它去掉前面的下标后，会扩展余下的内容，但是不会展示出来，当你用切片取值超出 len 的长度的时候它会自行判断是否由足够的容量还存着其他的值，若是有就会返回出来。这个就是它的扩展性，注意它只能扩展后面的，不能扩展前面的，且扩展的数组不能超过容量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;有关于切片-slice&quot;&gt;&lt;a href=&quot;#有关于切片-slice&quot; class=&quot;headerlink&quot; title=&quot;有关于切片 slice&quot;&gt;&lt;/a&gt;有关于切片 slice&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 go 语言中，数组其实是不经常使用的，因为它在</summary>
      
    
    
    
    
    <category term="go" scheme="https://hangxingfu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go两个数值交换</title>
    <link href="https://hangxingfu.github.io/2021/08/04/go%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%80%BC%E4%BA%A4%E6%8D%A2/"/>
    <id>https://hangxingfu.github.io/2021/08/04/go%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%80%BC%E4%BA%A4%E6%8D%A2/</id>
    <published>2021-08-03T16:10:10.000Z</published>
    <updated>2023-03-18T09:17:38.909Z</updated>
    
    <content type="html"><![CDATA[<p>关于 go 两个数值交换，第一个想到的应该是使用指针的方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a,b:=<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">    swap(&amp;a,&amp;b)</span><br><span class="line">    fmt.Println(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a,b *<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    *a,*b = *b,*a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以借助中间变量来作交换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a,b:=<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">    swap(&amp;a,&amp;b)</span><br><span class="line">    fmt.Println(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a,b *<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    tmp := *a</span><br><span class="line">*a = *b</span><br><span class="line">*b = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种方式，可以不用到指针也能交换；不过这里要注意一下需要有返回值，和需要取接受返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">swap(a, b)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> b, a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于 go 两个数值交换，第一个想到的应该是使用指针的方式&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="go" scheme="https://hangxingfu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>git克隆rpc failed</title>
    <link href="https://hangxingfu.github.io/2021/07/27/failed/"/>
    <id>https://hangxingfu.github.io/2021/07/27/failed/</id>
    <published>2021-07-27T05:06:05.000Z</published>
    <updated>2023-03-18T09:17:38.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-克隆报错-error-RPC-failed"><a href="#git-克隆报错-error-RPC-failed" class="headerlink" title="git 克隆报错 error: RPC failed"></a>git 克隆报错 error: RPC failed</h1><p><code>git config --global http.sslVerify false</code></p><hr><p><code>git config --list </code></p><p>看 <code>http.postbuffer</code> 参数是否设置，可以设置为 5242880000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 5242880000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git-克隆报错-error-RPC-failed&quot;&gt;&lt;a href=&quot;#git-克隆报错-error-RPC-failed&quot; class=&quot;headerlink&quot; title=&quot;git 克隆报错 error: RPC failed&quot;&gt;&lt;/a&gt;git 克隆报错 e</summary>
      
    
    
    
    
    <category term="Git" scheme="https://hangxingfu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>go依赖管理工具</title>
    <link href="https://hangxingfu.github.io/2021/07/26/go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://hangxingfu.github.io/2021/07/26/go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2021-07-26T02:05:54.000Z</published>
    <updated>2023-03-18T09:17:38.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="glide"><a href="#glide" class="headerlink" title="glide"></a>glide</h1><h3 id="go-依赖包管理工具-glide"><a href="#go-依赖包管理工具-glide" class="headerlink" title="go 依赖包管理工具 glide"></a>go 依赖包管理工具 glide</h3><p><a href="https://glidedocs.readthedocs.io/zh/latest/">glide 中文文档</a></p><p>glide.yaml 完整配置示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">package:</span> <span class="string">foor</span></span><br><span class="line"><span class="attr">homepage:</span> <span class="string">https://github.com/qiangmzsx</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">MIT</span></span><br><span class="line"><span class="attr">owners:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">qiangmzsx</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">qiangmzsx@hotmail.com</span></span><br><span class="line">    <span class="attr">homepage:</span> <span class="string">https://github.com/qiangmzsx</span></span><br><span class="line"><span class="comment"># 去除包</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">appengine</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">golang.org/x/net</span></span><br><span class="line"><span class="comment"># 排除目录</span></span><br><span class="line"><span class="attr">excludeDirs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="attr">import:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">github.com/astaxie/beego</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">github.com/coocood/freecache</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">github.com/garyburd/redigo/redis</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">github.com/go-sql-driver/mysql</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">github.com/bitly/go-simplejson</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">git.oschina.net/qiangmzsx/beegofreecache</span></span><br><span class="line"><span class="attr">testImport:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">github.com/smartystreets/goconvey</span></span><br><span class="line">    <span class="attr">subpackages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">convey</span></span><br></pre></td></tr></table></figure><p>glide 清除缓存 <code>glide cc</code><br>glide 更新 <code>glide up</code></p><ul><li>修改 yaml 文件添加包， <code>glide up</code></li><li>使用<code>glide get github.com/user/projiect</code>命令来添加依赖包</li><li>当有 glide.lock 文件的时候可以使用 <code>glide install</code> 来安装依赖包</li></ul><hr><h1 id="dep"><a href="#dep" class="headerlink" title="dep"></a>dep</h1><h3 id="Mac-安装-go-依赖管理工具-dep"><a href="#Mac-安装-go-依赖管理工具-dep" class="headerlink" title="Mac 安装 go 依赖管理工具 dep"></a>Mac 安装 go 依赖管理工具 dep</h3><blockquote><p>go 版本要&gt;&#x3D;1.9<br>dep 使用需要 fanqiang</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dep</span><br></pre></td></tr></table></figure><p>安装完成,dep 命令输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Dep is a tool <span class="keyword">for</span> managing dependencies <span class="keyword">for</span> Go projects</span><br><span class="line"></span><br><span class="line">Usage: <span class="string">&quot;dep [command]&quot;</span></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  init     Set up a new Go project, or migrate an existing one</span><br><span class="line">  status   Report the status of the project<span class="string">&#x27;s dependencies</span></span><br><span class="line"><span class="string">  ensure   Ensure a dependency is safely vendored in the project</span></span><br><span class="line"><span class="string">  version  Show the dep version information</span></span><br><span class="line"><span class="string">  check    Check if imports, Gopkg.toml, and Gopkg.lock are in sync</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">  dep init                               set up a new project</span></span><br><span class="line"><span class="string">  dep ensure                             install the project&#x27;</span>s dependencies</span><br><span class="line">  dep ensure -update                     update the locked versions of all dependencies</span><br><span class="line">  dep ensure -add github.com/pkg/errors  add a dependency to the project</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;dep help [command]&quot;</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h4 id="使用-dep-命令安装-gin"><a href="#使用-dep-命令安装-gin" class="headerlink" title="使用 dep 命令安装 gin"></a>使用 dep 命令安装 gin</h4><blockquote><p>在 GOPATH&#x2F;src 目录中使用 dep 命令</p></blockquote><p>新建任意目录，并在里面 dep init，成功后会生成两个文件（Gopkg.lock Gopkg.toml）和一个目录（vendor）</p><p><img src="https://gss0.baidu.com/9rkZbzqaKgQUohGko9WTAnF6hhy/mms-res/voice/choujiang/28968009-f49a4a6a-78eb-11e7-93cf-e695d45488da.14d8c0f3.png" alt="relation"></p><ul><li>vendor 依赖包会下载到这里</li><li>Gopkg.lock 暂时不用管</li><li>Gopkg.toml 需要的依赖配置写在这里</li></ul><p>在 toml 文件中增加依赖配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">constraint</span>]]</span><br><span class="line">  <span class="string">name</span> <span class="string">=</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">  <span class="string">version</span> <span class="string">=</span> <span class="string">&quot;1.4.0&quot;</span></span><br></pre></td></tr></table></figure><p>dep 清除缓存<code>rm -rf $GOPATH/pkg/dep/source/</code></p><p>之后执行 dep ensure 命令，会在 vendor 下安装包</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;glide&quot;&gt;&lt;a href=&quot;#glide&quot; class=&quot;headerlink&quot; title=&quot;glide&quot;&gt;&lt;/a&gt;glide&lt;/h1&gt;&lt;h3 id=&quot;go-依赖包管理工具-glide&quot;&gt;&lt;a href=&quot;#go-依赖包管理工具-glide&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="go" scheme="https://hangxingfu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-mod引入包</title>
    <link href="https://hangxingfu.github.io/2021/07/25/go-mod%E5%BC%95%E5%85%A5%E5%8C%85/"/>
    <id>https://hangxingfu.github.io/2021/07/25/go-mod%E5%BC%95%E5%85%A5%E5%8C%85/</id>
    <published>2021-07-25T05:19:37.000Z</published>
    <updated>2023-03-18T09:17:38.974Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此方式需要将你的 GO111MODULE 设置成 on,这样你就可以在任意目录下面开启你的项目了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">随便找个目录下, 新建godemo</span></span><br><span class="line">mkdir godemo</span><br><span class="line">cd godemo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化go mod</span></span><br><span class="line">go mod init godemo</span><br></pre></td></tr></table></figure><p>此时目录下就出现 <code>go.mod</code> 文件，打开查看</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module godemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br></pre></td></tr></table></figure><hr><p>新建文件<code>main.go</code>, 在 import 中写入想要引用的包<br>我这里使用 decimal 包<br>decimal 包地址：<a href="https://pkg.go.dev/github.com/shopspring/decimal">https://pkg.go.dev/github.com/shopspring/decimal</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/shopspring/decimal&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">price, err := decimal.NewFromString(<span class="string">&quot;136.02&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quantity := decimal.NewFromInt(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fee, _ := decimal.NewFromString(<span class="string">&quot;.035&quot;</span>)</span><br><span class="line">taxRate, _ := decimal.NewFromString(<span class="string">&quot;.08875&quot;</span>)</span><br><span class="line"></span><br><span class="line">subtotal := price.Mul(quantity)</span><br><span class="line"></span><br><span class="line">preTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">total := preTax.Mul(taxRate.Add(decimal.NewFromFloat(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Subtotal:&quot;</span>, subtotal)                      <span class="comment">// Subtotal: 408.06</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Pre-tax:&quot;</span>, preTax)                         <span class="comment">// Pre-tax: 422.3421</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Taxes:&quot;</span>, total.Sub(preTax))                <span class="comment">// Taxes: 37.482861375</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Total:&quot;</span>, total)                            <span class="comment">// Total: 459.824961375</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Tax rate:&quot;</span>, total.Sub(preTax).Div(preTax)) <span class="comment">// Tax rate: 0.08875</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>此时运行 go run main.go 会报错</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main.<span class="keyword">go</span>:<span class="number">5</span>:<span class="number">2</span>: no required module provides <span class="keyword">package</span> github.com/shopspring/decimal; to add it:</span><br><span class="line"><span class="keyword">go</span> get github.com/shopspring/decimal</span><br></pre></td></tr></table></figure><p>提示使用 <code>go get github.com/shopspring/decimal</code> 命令，使用会显示下载完成<br>再运行就成功</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">Subtotal: <span class="number">408.06</span></span><br><span class="line">Pre-tax: <span class="number">422.3421</span></span><br><span class="line">Taxes: <span class="number">37.482861375</span></span><br><span class="line">Total: <span class="number">459.824961375</span></span><br><span class="line">Tax rate: <span class="number">0.08875</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;此方式需要将你的 GO111MODULE 设置成 on,这样你就可以在任意目录下面开启你的项目了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="go" scheme="https://hangxingfu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go环境搭建（Mac）</title>
    <link href="https://hangxingfu.github.io/2021/07/01/go-study/"/>
    <id>https://hangxingfu.github.io/2021/07/01/go-study/</id>
    <published>2021-06-30T16:22:33.000Z</published>
    <updated>2023-03-18T09:17:38.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go-环境搭建（Mac）"><a href="#go-环境搭建（Mac）" class="headerlink" title="go 环境搭建（Mac）"></a>go 环境搭建（Mac）</h2><ol><li>下载 pkg 文件进行安装<br><a href="https://studygolang.com/dl">go 语言中文网下载地址</a></li><li>设置环境变量</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑.bash_profile文件</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#追加如下配置</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">GOROOT</span>=/usr/local/go</span><br><span class="line"><span class="comment">#GOPATH是自己的go项目路径，自定义设置</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">GOPATH</span>=/Users/molin/Documents/go</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">GOBIN</span>=<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GOBIN/usr/local/go</span><br><span class="line"></span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看go环境变量</span></span><br><span class="line">go env</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看go版本</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><ol start="3"><li>为 go 设置工作目录<br>目录内新建三个文件夹，分别是 bin pkg src</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;go-环境搭建（Mac）&quot;&gt;&lt;a href=&quot;#go-环境搭建（Mac）&quot; class=&quot;headerlink&quot; title=&quot;go 环境搭建（Mac）&quot;&gt;&lt;/a&gt;go 环境搭建（Mac）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载 pkg 文件进行安装&lt;br&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="go" scheme="https://hangxingfu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>brew 安装 PHP 环境</title>
    <link href="https://hangxingfu.github.io/2021/06/26/brew%E5%AE%89%E8%A3%85PHP%E7%8E%AF%E5%A2%83/"/>
    <id>https://hangxingfu.github.io/2021/06/26/brew%E5%AE%89%E8%A3%85PHP%E7%8E%AF%E5%A2%83/</id>
    <published>2021-06-25T16:45:43.000Z</published>
    <updated>2023-11-13T04:56:15.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h2><p><a href="https://brew.sh/index_zh-cn">brew 中文地址</a><br><a href="https://zhuanlan.zhihu.com/p/90765541">brew 常用命令</a></p><ul><li>brew 安装\卸载软件<br><code>brew install\uninstall XXX</code></li><li>brew 查看已安装的软件列表<br><code>brew list</code></li><li>brew 查看软件的安装信息<br><code>brew info XXX</code></li><li>brew 查看 service 列表状态<br><code>brew services list</code></li></ul><h2 id="brew-安装-nginx"><a href="#brew-安装-nginx" class="headerlink" title="brew 安装 nginx"></a>brew 安装 nginx</h2><p><code>brew search nginx</code><br><code>brew install nginx</code></p><ul><li><p>启动 nginx<br><code>nginx</code><br>启动后访问 nginx <a href="http://localhost:8080/">http://localhost:8080</a></p></li><li><p>关闭 nginx 服务<br><code>nginx -s stop</code></p></li><li><p>nginx 重启<br><code>nginx -s reload</code></p></li><li><p>查看 nginx 版本<br><code>nginx -v</code></p></li><li><p>nginx.conf 修改</p></li><li><p>nginx 日志 <code>/usr/local/var/log/nginx</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以把listen端口改为80</span></span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="comment"># 解开这个注释</span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="comment">#root           html;</span></span><br><span class="line">    <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">    <span class="comment">#fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多站点配置<br>新建 sites 目录，*.conf 都在这里</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf倒数第二行</span></span><br><span class="line"><span class="attribute">include</span> sites/<span class="regexp">*.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *.conf 模板</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  XXXX.com;</span><br><span class="line">    <span class="attribute">root</span>         /Users/XXXX/wwwroot/blog/public;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm index.php;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&quot;GET,POST&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&quot;Origin,No-Cache,X-Requested-With,If-Modified-Since,Pragma,Last-Modified,Cache-Control,Expires,Content-Type,X-E4M-With&quot;</span>;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">          <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">          <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">          <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">          <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="brew-安装-php"><a href="#brew-安装-php" class="headerlink" title="brew 安装 php"></a>brew 安装 php</h3><p><code>brew search php</code><br><code>brew install php@7.3</code></p><ul><li>安装 PHP 扩展<br>使用 pecl 安装 - <a href="https://zhuanlan.zhihu.com/p/113042273">pecl 安装教程</a><br>tips: 此处若安装好命令不能用可能需要设置环境变量 - 编译安装<br>下载源码包；phpize；.configure；make &amp;&amp; make install；在 php.ini 文件中添加扩展配置，重启 php-fpm</li><li>切换 PHP 版本</li></ul><h3 id="brew-安装-mysql"><a href="#brew-安装-mysql" class="headerlink" title="brew 安装 mysql"></a>brew 安装 mysql</h3><p><code>brew search php</code><br><code>brew install php@7.3</code></p><ul><li>安装完毕后设置数据库密码<br><code>mysql_secure_installation</code></li><li>开启 msyql 服务<br><code>mysql.server start</code></li><li>重启 mysql 服务<br><code>mysql.server restart</code></li><li>关闭 mysql 服务<br><code>mysql.server stop</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装-brew&quot;&gt;&lt;a href=&quot;#安装-brew&quot; class=&quot;headerlink&quot; title=&quot;安装 brew&quot;&gt;&lt;/a&gt;安装 brew&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://brew.sh/index_zh-cn&quot;&gt;brew 中文地址&lt;/a</summary>
      
    
    
    
    <category term="favorite" scheme="https://hangxingfu.github.io/categories/favorite/"/>
    
    
    <category term="PHP" scheme="https://hangxingfu.github.io/tags/PHP/"/>
    
  </entry>
  
</feed>
