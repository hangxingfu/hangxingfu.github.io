[{"title":"文章摘抄","url":"/2021/10/10/BOOKS-NOTE/","content":"\n### 《爱与信任》\n\n<p align=\"right\">三毛 <small>著</small></p>\n<p>&emsp;&emsp;母亲看我吃，她便快乐无比。我便笑称，吃到成了千台斤的大肥猪而死时，她必定在咽气之前，还要灌一碗参汤下去，好使她的爱，因为那碗汤，使我黄泉之路走得更有体力。</p>\n<p align=\"right\">< 2022-05-19 ></p>\n<hr>\n\n### 《北大授课：中华文化四十七讲》\n\n<p align=\"right\">余秋雨 <small>著</small></p>\n<p>&emsp;&emsp;没有阴影的高楼，一定还未曾建造；没有藤缠的大树，一定还气象未到。\n&emsp;&emsp;美，不是外在点缀，而是人性、人情的精选形式。在社会上，政治和经济是在争取生命的强大和自尊，而美，则在争取生命的品质和等级。</p>\n<p align=\"right\">< 2022-05-07 ></p>\n<hr>\n\n### 《情人》\n\n<p align=\"right\">玛格丽特·杜拉斯 <small>著</small></p>\n<p>&emsp;&emsp;我认识你，永远记得你。那时你很年轻，人人都说你美。现在我特地来告诉你，对我来说，我觉得现在你比年轻时候更美。那时你是年轻女人，与那时的容貌相比，我更爱你现在备受摧残的面容。</p>\n<p align=\"right\">< 2022-02-27 ></p>\n<hr>\n\n### 《双子星》\n\n<p align=\"right\">伊坂幸太郎 <small>著</small></p>\n<p>\n&emsp;&emsp;大婶缓缓转过头来，深深叹了口气：“优我，你脑子好使，肯定也知道借钱本身根本不是问题。我想说的是，谈钱需要相应的觉悟，它有可能破坏我跟你们之间的关系。你们明白这一点，却还想找我借钱，这让我心里不是滋味呀。借钱倒是没什么。”<br />\n&emsp;&emsp;我和风我深深地低下了头。<br />\n&emsp;&emsp;再多得辩解和歉意都没有意义了。<br />\n&emsp;&emsp;或许我们和大婶的关系会因此生隙，但总有一天裂痕会修复，我们会弥补她的。<br />\n&emsp;&emsp;我认为这样，风我肯定也一样。<br />\n&emsp;&emsp;最终借了两百万日元。<br />\n&emsp;&emsp;摞起来也没有多厚，甚至有些叫人失望。<br />\n</p>\n<p align=\"right\">< 2021-10-10 ></p>\n\n<hr>\n\n### 《三日间的幸福》\n\n<p align=\"right\">三秋缒 <small>著</small></p>\n<p>&emsp;&emsp;“虽然我现在才二十岁，但有很多事情都已忘光了。不管曾经多么幸福或痛苦，只要没遇上回想的契机，不消多久，我便全部忘记了。只要没注意这件事，恐怕连忘记本身都‘忘记了’。如果每个人都可以精确无误地记得最美好的事情，恐怕会愁眉苦脸地空虚度日了。就算每个人都可以精确无误地记住最糟的回忆，最终也只能愁眉苦脸地空虚度日。有些事若不先行记下，可能会将自己逼入绝境，所以每个人都只是在拼命记住事情而已。\n<p align=\"right\">< 2018-02-05 ></p>\n\n<hr>\n\n### 《一生所寻不过爱与自由》\n\n<p align=\"right\">李银河 <small>著</small></p>\n<p>&emsp;&emsp;活着只是一种人的状态，就像一条鱼，一棵树，一只甲壳虫。我们来到世上，我们消耗掉一些物质，改变周边的一些物质，然后离开人世。说起改变周边物质，想起刘亮程用第一人称写的农村生活：“我”扛了把铁锨，在地里挖了一个坑，然后仰天长叹：这就是我能改变的事物。</p>\n<p align=\"right\">< 2018-02-05 ></p>\n\n> 📚 海德格尔 -- 德国哲学家；刘亮程 -- 《一个人的村庄》\n","tags":["摘抄"],"categories":["文字"]},{"title":"go报错原因","url":"/2021/08/13/go报错原因/","content":"\n## go 报错原因\n\n- `no result values expected`\n  函数没有写返回值，却进行了 return\n\n- `undeclared name: xx`\n  为定义的变量名，注意定义时的 : 有没有写\n","tags":["go"]},{"title":"go切片需要注意的地方","url":"/2021/08/04/go切片需要注意的地方/","content":"\n### 有关于切片 slice\n\n- 在 go 语言中，数组其实是不经常使用的，因为它在函数传参时默认使用的是值传递（复制本身的值再传递给函数内，若是这个数组非常大，将会十分消耗内存资源，且在函数内对数组做出的改变不会影响到数组数据本身）；经常使用的是切片，就是 slice。\n\n- 其 slice 在作为函数参数时是引用传递，在函数内对其做的操作会影响到数据本身。\n\n- slice 的取值操作遵循半封闭原则，比如取值`[2:6]`，取 2 的数据，第 5 个取完就停止了，不会取 6 的数据。\n\n**`slice本身是没有数据的，底层是对数组的一个view（视图）`**\n\n- 数组想要传递到参数是切片的函数，可以这么写\n\n```go\nfunc main(){\n    arr := [...]int{1,2,3,4,5}\n    updateArray(arr[:])\n}\n\nfunc updateArray(a []int){\n    // to do ......\n}\n```\n\n这样当你在函数内修改数组的数据时，数组本身的数据也会跟着改变\n\n### slice 的扩展\n\n先看例子\n\n```go\narr := [...]int{0,1,2,3,4,5,6,7}\ns1 := arr[2:6]\ns2 := s1[3:5]\n```\n\n这时，请问 s1,s2 的值分别是多少?\n在 s1 中只有 4 个数值，根本不满足 5 的下标取值，按理说 s2 的取值应该会报错，但是确实能够取到，打印出来如下\n\n```go\ns1= [2 3 4 5]\ns2= [5 6]\n```\n\n如果单独取 5`s2[5]`会报错\n\n因为 slice 的数据结构是由 ptr(指针)，len（长度），cap（容量）组成的，当它去掉前面的下标后，会扩展余下的内容，但是不会展示出来，当你用切片取值超出 len 的长度的时候它会自行判断是否由足够的容量还存着其他的值，若是有就会返回出来。这个就是它的扩展性，注意它只能扩展后面的，不能扩展前面的，且扩展的数组不能超过容量。\n","tags":["go"]},{"title":"go两个数值交换","url":"/2021/08/04/go两个数值交换/","content":"\n关于 go 两个数值交换，第一个想到的应该是使用指针的方式\n\n```go\nfunc main(){\n    a,b:=3,4\n    swap(&a,&b)\n    fmt.Println(a,b)\n}\nfunc swap(a,b *int){\n    *a,*b = *b,*a\n}\n```\n\n也可以借助中间变量来作交换\n\n```go\nfunc main(){\n    a,b:=3,4\n    swap(&a,&b)\n    fmt.Println(a,b)\n}\nfunc swap(a,b *int){\n    tmp := *a\n\t*a = *b\n\t*b = tmp\n}\n```\n\n还有一种方式，可以不用到指针也能交换；不过这里要注意一下需要有返回值，和需要取接受返回值\n\n```go\nfunc main() {\n\ta, b := 3, 4\n\tswap(a, b)\n\tfmt.Println(a, b)\n}\nfunc swap(a, b int) (int, int) {\n\treturn b, a\n}\n```\n","tags":["go"]},{"title":"git克隆rpc failed","url":"/2021/07/27/failed/","content":"\n# git 克隆报错 error: RPC failed\n\n`git config --global http.sslVerify false`\n\n---\n\n`git config --list `\n\n看 `http.postbuffer` 参数是否设置，可以设置为 5242880000\n\n```shell\n     git config --global http.postBuffer 5242880000\n```\n","tags":["Git"]},{"title":"go依赖管理工具","url":"/2021/07/26/go依赖管理工具/","content":"\n# glide\n\n### go 依赖包管理工具 glide\n\n[glide 中文文档](https://glidedocs.readthedocs.io/zh/latest/)\n\nglide.yaml 完整配置示例\n\n```yaml\npackage: foor\nhomepage: https://github.com/qiangmzsx\nlicense: MIT\nowners:\n  - name: qiangmzsx\n    email: qiangmzsx@hotmail.com\n    homepage: https://github.com/qiangmzsx\n# 去除包\nignore:\n  - appengine\n  - golang.org/x/net\n# 排除目录\nexcludeDirs:\n  - node_modules\n# 导入包\nimport:\n  - package: github.com/astaxie/beego\n    version: 1.8.0\n  - package: github.com/coocood/freecache\n  - package: github.com/garyburd/redigo/redis\n  - package: github.com/go-sql-driver/mysql\n  - package: github.com/bitly/go-simplejson\n  - package: git.oschina.net/qiangmzsx/beegofreecache\ntestImport:\n  - package: github.com/smartystreets/goconvey\n    subpackages:\n      - convey\n```\n\nglide 清除缓存 `glide cc`\nglide 更新 `glide up`\n\n- 修改 yaml 文件添加包， `glide up`\n- 使用`glide get github.com/user/projiect`命令来添加依赖包\n- 当有 glide.lock 文件的时候可以使用 `glide install` 来安装依赖包\n\n---\n\n# dep\n\n### Mac 安装 go 依赖管理工具 dep\n\n> go 版本要>=1.9\n> dep 使用需要 fanqiang\n\n```sh\nbrew install dep\n```\n\n安装完成,dep 命令输出\n\n```sh\nDep is a tool for managing dependencies for Go projects\n\nUsage: \"dep [command]\"\n\nCommands:\n\n  init     Set up a new Go project, or migrate an existing one\n  status   Report the status of the project's dependencies\n  ensure   Ensure a dependency is safely vendored in the project\n  version  Show the dep version information\n  check    Check if imports, Gopkg.toml, and Gopkg.lock are in sync\n\nExamples:\n  dep init                               set up a new project\n  dep ensure                             install the project's dependencies\n  dep ensure -update                     update the locked versions of all dependencies\n  dep ensure -add github.com/pkg/errors  add a dependency to the project\n\nUse \"dep help [command]\" for more information about a command.\n```\n\n#### 使用 dep 命令安装 gin\n\n> 在 GOPATH/src 目录中使用 dep 命令\n\n新建任意目录，并在里面 dep init，成功后会生成两个文件（Gopkg.lock Gopkg.toml）和一个目录（vendor）\n\n![relation](https://gss0.baidu.com/9rkZbzqaKgQUohGko9WTAnF6hhy/mms-res/voice/choujiang/28968009-f49a4a6a-78eb-11e7-93cf-e695d45488da.14d8c0f3.png)\n\n- vendor 依赖包会下载到这里\n- Gopkg.lock 暂时不用管\n- Gopkg.toml 需要的依赖配置写在这里\n\n在 toml 文件中增加依赖配置\n\n```yaml\n[[constraint]]\n  name = \"github.com/gin-gonic/gin\"\n  version = \"1.4.0\"\n```\n\ndep 清除缓存`rm -rf $GOPATH/pkg/dep/source/`\n\n之后执行 dep ensure 命令，会在 vendor 下安装包\n","tags":["go"]},{"title":"go-mod引入包","url":"/2021/07/25/go-mod引入包/","content":"\n> 此方式需要将你的 GO111MODULE 设置成 on,这样你就可以在任意目录下面开启你的项目了\n\n```shell\n#随便找个目录下, 新建godemo\nmkdir godemo\ncd godemo\n#初始化go mod\ngo mod init godemo\n```\n\n此时目录下就出现 `go.mod` 文件，打开查看\n\n```go\nmodule godemo\n\ngo 1.16\n```\n\n---\n\n新建文件`main.go`, 在 import 中写入想要引用的包\n我这里使用 decimal 包\ndecimal 包地址：https://pkg.go.dev/github.com/shopspring/decimal\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/shopspring/decimal\"\n)\n\nfunc main() {\n\tprice, err := decimal.NewFromString(\"136.02\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tquantity := decimal.NewFromInt(3)\n\n\tfee, _ := decimal.NewFromString(\".035\")\n\ttaxRate, _ := decimal.NewFromString(\".08875\")\n\n\tsubtotal := price.Mul(quantity)\n\n\tpreTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(1)))\n\n\ttotal := preTax.Mul(taxRate.Add(decimal.NewFromFloat(1)))\n\n\tfmt.Println(\"Subtotal:\", subtotal)                      // Subtotal: 408.06\n\tfmt.Println(\"Pre-tax:\", preTax)                         // Pre-tax: 422.3421\n\tfmt.Println(\"Taxes:\", total.Sub(preTax))                // Taxes: 37.482861375\n\tfmt.Println(\"Total:\", total)                            // Total: 459.824961375\n\tfmt.Println(\"Tax rate:\", total.Sub(preTax).Div(preTax)) // Tax rate: 0.08875\n}\n```\n\n---\n\n此时运行 go run main.go 会报错\n\n```go\nmain.go:5:2: no required module provides package github.com/shopspring/decimal; to add it:\n\tgo get github.com/shopspring/decimal\n```\n\n提示使用 `go get github.com/shopspring/decimal` 命令，使用会显示下载完成\n再运行就成功\n\n```go\ngo run main.go\n\n#输出\nSubtotal: 408.06\nPre-tax: 422.3421\nTaxes: 37.482861375\nTotal: 459.824961375\nTax rate: 0.08875\n```\n","tags":["go"]},{"title":"go环境搭建（Mac）","url":"/2021/07/01/go-study/","content":"\n## go 环境搭建（Mac）\n\n1. 下载 pkg 文件进行安装\n   [go 语言中文网下载地址](https://studygolang.com/dl)\n2. 设置环境变量\n\n```\n#编辑.bash_profile文件\nvim ~/.bash_profile\n\n#追加如下配置\nexport GOROOT=/usr/local/go\n#GOPATH是自己的go项目路径，自定义设置\nexport GOPATH=/Users/molin/Documents/go\nexport GOBIN=$GOROOT/bin\nexport PATH=$PATH:$GOBIN/usr/local/go\n\n#生效\nsource ~/.bash_profile\n\n#查看go环境变量\ngo env\n\n#查看go版本\ngo version\n```\n\n3. 为 go 设置工作目录\n   目录内新建三个文件夹，分别是 bin pkg src\n","tags":["go"]},{"title":"brew 安装 PHP 环境","url":"/2021/06/26/brew安装PHP环境/","content":"\n## 安装 brew\n\n[brew 中文地址](https://brew.sh/index_zh-cn)\n[brew 常用命令](https://zhuanlan.zhihu.com/p/90765541)\n\n- brew 安装\\卸载软件\n  `brew install\\uninstall XXX`\n- brew 查看已安装的软件列表\n  `brew list`\n- brew 查看软件的安装信息\n  `brew info XXX`\n- brew 查看 service 列表状态\n  `brew services list`\n\n## brew 安装 nginx\n\n`brew search nginx`\n`brew install nginx`\n\n- 启动 nginx\n  `nginx`\n  启动后访问 nginx http://localhost:8080\n- 关闭 nginx 服务\n  `nginx -s stop`\n- nginx 重启\n  `nginx -s reload`\n- 查看 nginx 版本\n  `nginx -v`\n- nginx.conf 修改\n\n```\n# 可以把listen端口改为80\nlisten       80;\n# 解开这个注释\nlocation ~ \\.php$ {\n    #root           html;\n    fastcgi_pass   127.0.0.1:9000;\n    fastcgi_index  index.php;\n    #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n\n    include        fastcgi_params;\n}\n```\n\n- 多站点配置\n  新建 sites 目录，\\*.conf 都在这里\n\n```\n# nginx.conf倒数第二行\ninclude sites/*.conf\n\n# *.conf 模板\nserver {\n    listen       80;\n    server_name  XXXX.com;\n    root         /Users/XXXX/wwwroot/blog/public;\n    index  index.html index.htm index.php;\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Credentials \"true\";\n    add_header Access-Control-Allow-Methods \"GET,POST\";\n    add_header Access-Control-Allow-Headers \"Origin,No-Cache,X-Requested-With,If-Modified-Since,Pragma,Last-Modified,Cache-Control,Expires,Content-Type,X-E4M-With\";\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n    location ~ \\.php$ {\n          fastcgi_pass   127.0.0.1:9000;\n          fastcgi_index  index.php;\n          fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n          include        fastcgi_params;\n      }\n}\n```\n\n### brew 安装 php\n\n`brew search php`\n`brew install php@7.3`\n\n- 安装 PHP 扩展\n  使用 pecl 安装 - [pecl 安装教程](https://zhuanlan.zhihu.com/p/113042273)\n  tips: 此处若安装好命令不能用可能需要设置环境变量 - 编译安装\n  下载源码包；phpize；.configure；make && make install；在 php.ini 文件中添加扩展配置，重启 php-fpm\n- 切换 PHP 版本\n\n### brew 安装 mysql\n\n`brew search php`\n`brew install php@7.3`\n\n- 安装完毕后设置数据库密码\n  `mysql_secure_installation`\n- 开启 msyql 服务\n  `mysql.server start`\n- 重启 mysql 服务\n  `mysql.server restart`\n- 关闭 mysql 服务\n  `mysql.server stop`\n","tags":["PHP"],"categories":["favorite"]}]